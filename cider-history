;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("hc" "(filter #(not (contains? #{1 2 3} %)) [0 1 2 3 4 5])" "(filter #(contains? #{1 2 3} %) [0 1 2 3 4 5])" "(doc get)" "({:one 1 :two 2} :three)" "({:one 1 :two 2} :one)" "(1 {1 1, 2 2})" "(conj [1 2 3] 4)" "(doc append)" "(doc str/split)" "(doc bit-set)" "(doc conj)" "(val {:one 1 :two 2})" "(doc val)" "(doc range)" "(doc swap!)" "(doc filter)" "(doc reduce)" "(doc partition)" "(doc re-find)" "(doc nth)" "(let [[m i] (get '([1 2] [2 3]) 0)] m)" "(let [[m i] (get [[1 2] [2 3]] 0)] m)" "(let [[m i] (get [[1 2] [2 3]] 0)])" "(let [[m i] (get '([1 2] [2 3]) 0)])" "(let [[moduli indx] (get [1 2 3 4] 0)] moduli)" "(let [[moduli indx] (get [1 2 3 4] 0)])" "(get [1 2 3] 0)" "(get [1 2 3] 4)" "(/ 270 90)" "(/ 0 90)" "(/ 90 90)" "(mod 90 270)" "(nth (cycle [\"N\" \"E\" \"S\" \"W\"]) 5)" "(nth (cycle \"N\" \"E\" \"S\" \"W\") 5)" "(str/index-of \"N\" \"NESW\")" "(index-of \"N\" \"NESW\")" "(mod 90 360)" "(mod 360 360)" "(mod 270 360)" "(str (nth \"nesw\" 0))" "(nth \"nesw\" 0)" "(/ 180 90)" "(/ 90 90)" "(mod 90 180)" "(mod 180 90)" "(key \"e\")" "(case nil \"1\" 1)" "(map + [1 2] [2 3])" "(map + [0 2] [1 0])" "(map + [0 1] [1 0])" "(apply + [0 1] [1 0])" "(+ [0 1] [1 0])" "(true? nil)" "(reduce true? [nil nil])" "(reduce + [nil nil])" "(reduce + (for [x (range 10)] x))" "(reduce + nil)" "(array '(1 2 3))" "(part-2 example)" "example" "(in-ns 'advent-of-code.day-09)" "(#{1 2 3} 4)" "(#{1 2 3} 1)" "(pprint (conj clojure.lang.PersistentQueue/EMPTY {\"shiny gold\" 1}))" "(conj clojure.lang.PersistentQueue/EMPTY {\"shiny gold\" 1})" "(let [x (atom [{\"one\" 1 \"two\" 2}])] (swap! x pop))" "(let [x (atom [{\"one\" 1 \"two\" 2}])] @x)" "(let [x (atom [{\"one\" 1 \"two\" 2}])] (for [[k v] (swap! x pop)] (println k v)) @x)" "(first (keys (first [{\"one\" 1 \"two\" 2}])))" "(first [{\"one\" 1 \"two\" 2}])" "(first (keys {\"one\" 1 \"two\" 2}))" "(example-map \"shiny gold\")" "(count-bags2 1 \"shiny gold\" example-map)" "(count (count-bags2 1 \"shiny gold\" example-map))" "(count-bags2 1 \"shiny gold\" example-map)" "(example-map \"shiny gold\")" "example-map" "(count-bags 1 \"shiny gold\" example-map)" "(example-map \"shiny gold\")" "(count-bags 1 \"shiny gold\" example-map)" "example-map" "(read-line \"{nil nil}\")" "(read-line {nil nil})" "(count-bags 1 \"shiny gold\" example-map)" "(example-map \"shiny gold\")" "(bags-that-hold \"shiny gold\" example-map)" "(doseq [x #{\"one\" \"two\"}] (println x))" "(doseq [x #{\"one\" \"two\"} (println x)])" "(bags-that-hold \"shiny gold\" example-map)" "(seq #{\"one\" \"two\" \"three\"})" "(apply #(println %) #{\"one\" \"two\" \"three\"})" "(bags-that-hold \"shiny gold\" example-map)" "(set (bags-that-hold \"shiny gold\" example-map))" "{set (bags-that-hold \"shiny gold\" example-map)}" "(bags-that-hold \"shiny gold\" example-map)" "(for [[k v] example-map] (if (contains? v \"shiny gold\") k))" "example-map" "(for [[k v] {:one 1 :two 2}] k)" "(for [[k v] {:one 1 :two 2}] key)" "(for [key {:one 1 :two 2}] key)" "(re-find #\"(\\d+) (\\w* \\w*) bag\" \"2 muted yellow bags\")" "(refind #\"(\\W) bags\" \"2 muted yellow bags\")" "(re-find #\"(W) bags\" \"2 muted yellow bags\")" "(re-find #\"(\\w) bags\" \"2 muted yellow bags\")" "(re-find #\"(\\w\\w) bags\" \"2 muted yellow bags\")" "(re-find #\"(\\d?) (\\w\\w) bags\" \"2 muted yellow bags\")" "(re-find #\"(\\d?) (\\w \\w) bags\" \"2 muted yellow bags\")" "(re-find #\"(\\d?) (\\w){2} bags\" \"2 muted yellow bags\")" "bags\" \"2 muted yellow bags\")" " (re-find #\"(\\d?)(\\w+)bags\" \"2 muted yellow bags\")" " (re-find #\"(\\d?)(\\w+) bags\" \"2 muted yellow bags\")" " (re-find #\"(\\d) (\\w+) bags\" \"2 muted yellow bags\")" " (re-find #\"(\\d?) (\\w){2} bags\" \"2 muted yellow bags\")" " (re-find #\"(\\d?) (\\S){2} bags\" \"2 muted yellow bags\")" "(re-find #\"(\\d?) (\\S \\S) bags\" \"2 muted yellow bags\")" "(re-find #\"(\\d+) (\\S \\S) bags\" \"2 muted yellow bags\")" "
\")" "(re-find #\"(\\d+) (\\S+) bags\" \"2 muted yellow bags\")" "(re-find #\"(\\d+) ( \\S+) bag\" \"2 muted yellow bags\")" "(re-find #\"(\\d+) (\\S+) bag\" \"2 muted yellow bags\")" "(re-find #\"(\\d+)(\\S+) bag\" \"2 muted yellow bags\")" "(re-find #\"(\\d)(\\S+) bag\" \"2 muted yellow bags\")" "(in-ns 'advent-of-code.day-07)" "(max-key {:a 1 :b 2})" "(max {:k 1 :b 2})" "(apply set/intersection (for [person (str/split-lines \"laksjdflskf\")] (set person)))" "(for [person (str/split-lines \"alskdjf\"
                                     )] (set person))" "(apply set (str/split-lines \"alskjdfn\\nkslajf\"))" " (str/split-lines \"alskjdfn\\nkslajf\")" " (str/split-lines \"alskjdfnkslajf\")" " (str/split-lines \"alskjdf/nkslajf\")" "(apply set (str/split-lines \"alskjdf/nkslajf\"))" "(apply set (str/split-lines \"lskjdflaskj\"))" "(apply set/intersection (set \"alksdjf;alskk\"))" "(apply set/intersection (apply set \"alksdjf;alskk\"))" "(apply set (str/split-lines \"alskdjf\"))" "(str/split-lines \"asldkfj\")" "(set/intersection #{1 2 3})" "(in-ns 'advent-of-code.day-06)" "(count #{})" "(count #{1 2 3})" "(apply set [\"123ss\" \"12ee\"])" "(apply set \"12sss\" \"12ee\")" "(sorted-set \"1233ff\")" "(count (disj (set \"1234jjj\\n\") \\newline))" "(disj (set \"1234jjj\\n\") \\newline)" "(disj (set \"1234jjj\\n\") \\n)" "(disj (set \"124jlkkjjj\\n\") \"\\n\")" "(set \"slkdjf;\")" "(in-ns 'advent-of-code.day-06)" "(sorted-set (range 871))" "(set (range 871))" "(difference #{1 2 3} #{2})" "(max (sorted-set '(1 2 4 3)))" "(subs \"1000110111\" 7 10)" "(subs \"1000110111\" 8 11)" "(subs \"1000110111\" 8 10)" "(subs \"1000110111\" 7 9)" "(subs \"1000110111\" 0 6)" "(seat-id \"1000110111\")" "(->bits \"BFFFBBFRRR\")" "(edn/read-string \"2R100110111\")" "(edn/read-str \"2R100110111\")" "(str \"2R\" (str/replace (str/replace \"BFFBBFRRR\" #\"[FL]\" \"0\") #\"[BR]\" \"1\"))" "(str \"24\" (str/replace (str/replace \"BFFBBFRRR\" #\"[FL]\" \"0\") #\"[BR]\" \"1\"))" "(str/replace (str/replace \"BFFBBFRRR\" #\"[FL]\" \"0\") #\"[BR]\" \"1\")" "(str/replace \"BFFBBFRRR\" #\"[BF]\" \"0\")" "(bit-set 0 0)" "(bit 128)" "2r10000000" "2r100000000" "(bit-set 0 7)" "2r1111111" "2r0001" "2r1111" "2r1001" "2r1000" "2r0001" "2r1111" "2r0000" "(bit-set 2r1111110 7)" "(bit-set 16 7)" "(bit-set 0 7)" "(bit-set 0 4)" "(bit-set 2r0000 4)" "(bit-set 2r0000000 0)" "(bit-set 2r0000000 7)" "(in-ns 'advent-of-code.day-05)" "(count nil)" "(count \"0952910465\")" "(len \"0952910465\")" "(some #(= \"ble\" %) [\"amb\" \"blu\"])" "(some #(= \"blu\" %) [\"amb\" \"blu\"])" "(some? #(= \"blu\" %) [\"amb\" \"blu\"])" "(try (edn/read-string \"123r\") (catch 0))" "(try (edn/read-string \"123r\") (catch Exception e 0))" "(try (edn/read-string \"123r\") (catch Exception e 0) 1)" "(try (edn/read-string \"123r\") :pass :fail)" "(edn/read-string \"123r\")" "(read-string \"123r\")" "(in-ns 'advent-of-code.day-04)" "(< 200 (Long/parseLong \"300\") 400)" "(< 200 (Long/parseLong 300) 400)" "(< 200 \"300\" 400)" "(Long/parseLong \"233333333\")" "(Integer/parseInt \"133t\")" "(iyr? \"b\")" "(byr? t)" "(byr? \"b\")" "(byr? t)" "(byr? 2)" "(str/split example #\"\\n\\n\")" "(str/split \"\\n\\n\" example)" "(str/split example \"\\n\\n\")" "example" "(str/split-lines example)" "(max (frequencies (str/split-lines file)))" "file" "(in-ns 'advent-of-code.day-04)" "(for [i (range 11)])" "(for [x (range 10) y (range 1 9 2)] (println x y))" "(for [x (range 10) y (range 1 9 2)] (print x y))" "(for [x (range 10) y (range 1 9 2) (print x y)])" "(for [x (range 10)])" "(for [x (range (count (str/split-lines file)))] (mod x 1))" "(count (str/split-lines file))" "(for [x (range (count (str/split-lines file)))] (mod x 2))" "(for [x (range 11)] (mod x 2))" "(* 2 7 3 4 2)" "(* 66 153 79 92 35)" "(for [x (range 0  11 3)] x)" "(for [x (range 11)] x)" "(mod 2 1)" "(mod 1 1)" "(mod 0 1)" "(mod 1 2)" "(mod 0 2)" "(for [slope [{:r 1 :d 1} {:r 3 :d 1} {:r 5 :d 1} {:r 7 :d 1}{:r 1 :d 2}]] (slope :r))" "file" "(in-ns 'advent-of-code.day-03)" "(for [x (range 10)] x)" "(if false 1 0)" "(if true 1 0)" "(count [true true false])" "(count [\"111\" \"222\"])" "(count (\"1111\" \"222\"))" "(rem 12 11)" "(rem 1 11)" "(rem 0 11)" "(rem 10 11)" "(rem 1 11)" "(rem 11 11)" "(count \".......\")" "(mod 1 11)" "(mod 11 11)" "(mod 12 11)" "(mod 3 11)" "(nth \"...#.\" 3)" "(nth (repeatedly \"..#.#\") 5)" "(nth (repeat \"..#.#\") 5)" "(nth 5 (repeat \"#..#\"))" "(part-2 input)" "(nth \"1234\" 0)" "(part-1 input)" "(part-1 input)

" "(Integer/parsInt nil)" "(part-2 input)

" "(part-2 input)" "(part-1 input)" "(part-2 input)" "(part-1 input)" "(for [x input] (parse x))" "(parse (first input))" "(first input)" "(doseq [x input] (parse x))" "input" "(in-ns 'advent-of-code.day-02)" "input" "(for [x input] (parse x))" "(doseq [x input] (parse x))" "(doseq [x input] x)" "input" "(doseq [x input] (parse x))" "(part-1 input)" "(part-2 input)" "(first (seq \"b\"))" "(seq \"b\")" "(part-2 input)" "(part-1 input)" " (part-1 input)" "(part-1 input)" "             (first (seq (chars (char-array \"b\"))))" "(seq (chars (char-array \"b\")))" "(chars (char-array \"b\"))" "(char-array \"b\")" "(chars \"b\")" "(char \"b\")" "((frequencies \"aaabbca\") \"b\")" "(parse (first input))" "((frequencies \"aaabbca\") b)" "((frequencies \"aaabbca\") \\b)" ") )" "(\\b (frequencies \"aaaabbbcca\"))" "(frequencies \"aaaabbbcca\")" "(frequencies (split \"\" \"aaaabbbcca\"))" "(frequency (split \"\" \"aaaabbbcca\"))" "(frequeny (split \"\" \"aaaabbbcca\"))" "(frequency \"aaabbb\")" "(list (first input))" "(parse (first input))" "input" "(in-ns 'advent-of-code.day-02)" "(part-2 input)" "(part-1 input)" "input" "(map #(Integer/parseInt %) input)" "(map Integer/parseInt input)" "(map int input)" "input" "(line-seq input)" "(part-1 input)" "input" "(def input (slurp \"~/Downloads/input\"))" "(def input (slurp \"https://adventofcode.com/2020/day/1/input\"))" "(slurp \"~/git/adventofcode/resources/day-01.txt\")" "(slurp (resource \"day-01.txt\"))" "(slurp (java.io.FileReader. \"/recources/day-01.txt\"))" "(slurp \"resource/day-01.txt\")" "(slurp \"resource/day-1.txt\")" "(def input (slurp (resource \"day-1.txt\")))" "input" "(in-ns 'advent-of-code.day-01)" "(doc feed)" "(feed \"qw\")" "(macroexpand '(feed uuid))" "(macroexpand-1 '(feed uuid))" "(macroexpand-1 '(db-collect uid :response creatFeedStream (clj->js {:reverse true})))" "(in-ns 'server.ssb)" "(macroexpand-1 '(servers.macros/db-collect uid :response createFeedStream (clj->js {:reverse true})))" "(macroexpand-1 '(ssb/db-collect uid :response createFeedStream (clj->js {:reverse true})))" "(macroexpand-1 'ssb/db-collect)" "(macroexpand-1 'db-collect)" "(macroexpand-1 `(db-collect uid :response createFeedStream (clj->js {:reverse true})))" "(macroexpand-1 '(feed uid))" "(macroexpand-1 '(db-collect uid :response createFeedStream (clj->js {:reverse true})))" "(ssb/feed \"qw\")" "@ssb/db-conns" "(ns-public)" "(ns-objects)" "(in-ns 'server.core)" " (shadow.cljs.devtools.api/nrepl-select :server)" "(in-ns 'server.core)" " (shadow.cljs.devtools.api/nrepl-select :server)" "(in-ns 'server.core)" "(shadow.cljs.devtools.api/nrepl-select :server) " "(ssb/feed \"qw\")" "(macroexpand-1 '(server.macros/db-collect uid :response createFeedStream (clj->js {:reverse true})))" "'(~(+ 1 2) 3)" "(macroexpand-1 '(server.macros/db-collect uid :response createFeedStream (clj->js {:reverse true})))" "(in-ns 'server.ssb)" "(macroexpand-1 '(db-collect uid :response createFeedStream (clj->js {:reverse true})))" "(macroexpand-1 '(ssb/db-collect uid :response createFeedStream (clj->js {:reverse true})))" "(macroexpand-1 (ssb/db-collect uid :response createFeedStream (clj->js {:reverse true})))" "(in-ns 'server.core)" "(shadow.cljs.devtools.api/nrepl-select :server) " "(macroexpand-1 (ssb/db-collect uid :response createFeedStream (clj->js {:reverse true})))" "(macroexpand-1 (ssb/db-collect uid :response createFeedStream (clj->js {:reverse true})) )" "(macroexpand-1 (db-collect uid :response createFeedStream (clj->js {:reverse true})) )" "(ssb/about \"qw\" \"@5XaVcAJ5DklwuuIkjGz4lwm2rOnMHHovhNg7BFFnyJ8=.ed25519\")" "(ssb/about-name \"qw\" \"@5XaVcAJ5DklwuuIkjGz4lwm2rOnMHHovhNg7BFFnyJ8=.ed25519\")" "(about-name \"qw\" \"@5XaVcAJ5DklwuuIkjGz4lwm2rOnMHHovhNg7BFFnyJ8=.ed25519\")" "(ssb/has-blob? \"qw\" \"&6i3TpQTMme/hJSS2+v3fBD9fG7QzclsDShBeIGArYjc=.sha256\")" "(ssb/list-blobs \"qw\")" "(ssb/parse-json (ssb/manifest! \"qw\"))" ")" "(ssb/manifest! \"qw\")" "(ssb/list-blobs \"qw\")" "(list-blobs \"qw\")" "(in-ns 'server.core)" "(shadow.cljs.devtools.api/nrepl-select :server) " "(ssb/db-sync \"aa\" #(.version %))" "(ssb/about-name \"ab\" \"@5XaVcAJ5DklwuuIkjGz4lwm2rOnMHHovhNg7BFFnyJ8=.ed25519\")" "(ssb/about-name \"aa\" \"@5XaVcAJ5DklwuuIkjGz4lwm2rOnMHHovhNg7BFFnyJ8=.ed25519\")" "(about-name \"aa\" \"@5XaVcAJ5DklwuuIkjGz4lwm2rOnMHHovhNg7BFFnyJ8=.ed25519\")" "(ssb/db-sync \"aa\" #(.status %))" "(ssb/db-sync \"aa\" #(.version %))" "(ssb/db-sync \"aa\" #(.usage %))" "(ssb/db-sync \"aa\" #(.version %))" "(ssb/db-sync \"aa\" #(.progress %))" "(ssb/db-sync \"aa\" #(.status %))" "(ssb/db-sync \"aa\" #(.usage %))" "(ssb/db-sync \"aa\" .address)" "(ssb/db-sync \"aa\" #(.address %))" "(ssb/db-sync \"aa\" #(.manifest %))" "(ssb/parse-json (ssb/manifest! \"aa\"))" "(ssb/manifest! \"aa\")" "(ssb/about-name \"aa\" (ssb/get-id \"aa\"))" "(ssb/get-id \"aa\")" "(ssb/about-name \"aa\" (ssb/get-id \"aa\"))" "(ssb/get-id \"aa\")" "(ssb/about-name \"aa\" (ssb/get-id \"aa\"))" "(ssb/about-name \"aa\" (db/get-id \"aa\"))" "(ssb/db-collect \"aa\" (fn [db] (.latestSequence db)))" "(db-collect \"aa\" (fn [db] (.latestSequence db)))" "(ssb/parse-json (ssb/manifest! \"aa\"))" "(js->clj (ssb/manifest! \"aa\"))" "(ssb/manifest! \"aa\")" "(\"aa\" @ssb/db-conns)" "@ssb/db-conns" "(in-ns 'server.core)" "(shadow.cljs.devtools.api/nrepl-select :server) " "(in-ns 'server.core)" "(shadow.cljs.devtools.api/nrepl-select :server) " " (shadow.cljs.devtools.api/nrepl-select :server)" ":cljs/quit" "db-conns" "@db-conns" "(in-ns 'server.ssb)" "(in-ns 'server.core)" " (shadow.cljs.devtools.api/nrepl-select :server)" "(in-ns 'server.core)" " (shadow.cljs.devtools.api/nrepl-select :server)" ":cljs/quit" "(in-ns 'server.core)" " (shadow.cljs.devtools.api/nrepl-select :server)" "(in-ns 'server.ssb)" " (shadow.cljs.devtools.api/nrepl-select :server)" ":clj/quit" ":cljs/quit" "(in-ns 'server.ssb)" " (shadow.cljs.devtools.api/nrepl-select :server)" ":cljs/quit" " (shadow.cljs.devtools.api/nrepl-select :server)" "(in-ns 'server.ssb)" "(chsk-send! \"u2\" [:ssb/error-event {:error \"bacon!\"}])" "(chsk-send! \"user\" [:ssb/error-event {:error \"bacon!\"}])" "(chsk-send! \"user\" [:error {:error \"bacon!\"}])" "(in-ns 'client.core)" "(chsk-send! \"user\" [:error-event {:msg \"bacon!\"}])" "(chsk-send! \"user\" [:ssb/error-event {:msg \"bacon!\"}])" "(chsk-send! \"user\" [:error {:msg \"bacon!\"}])" "(chsk-send! \"bacon\" [:ssb/error-event {:msg \"bacon!\" }])" "(chsk-send! \"bacon\" [:ssb/error-event {:msg \"boom!\" }])" "(chsend) (chsk-send! \"bacon\" [:ssb/error-event {:msg \"boom!\" }])" "(chsk-send! \"bacon\" \"yelp!\")" "(chsk-send! \"user\" [:ssb/error-event {:msg \"boom!\" }])" "(chsk-send! \"user-id\" [:ssb/error-event {:msg \"boom!\" }])" "(in-ns 'server.ws)" "(bus/dispatch! bus/msg-ch :error {:uid \"user-id\" :message \"error event\"})" "(get @db-conns \"user-id\")" "@db-conns" "(bus/dispatch! bus/msg-ch :add-message {:uid \"user-id\" :content {:content \"content\" :type \"post\"}})" "(bus/dispatch! bus/msg-ch :add-message \"user-id\" {:content \"content\" :type \"post\"})" "(bus/dispatch! bus/msg-ch :add-message []\"user-id\" {:content \"content\" :type \"post\"})" "(bus/dispatch! bus/msg-ch :add-message [\"user-id\" {:content \"content\" :type \"post\"}])" "@db-conns" "(bus/dispatch! bus/msg-ch :server-start \"user-id\")" "@db-conns" "(bus/dispatch! bus/msg-ch :error [\"user-id\" {:error \"error!\"}])" "(bus/dispatch! bus/msg-ch :error {\"user-id\" {:error \"error!\"}})" "\"user-id\" {:error \"error!\"}" "(bus/dispatch! bus/msg-ch :error \"user-id\" {:error \"error!\"})" "(bus/dispatch! bus/msg-ch :error {:error \"this is an error message!\"})" "(bus/dispatch! :error {:error \"this is an error message!\"})" "(in-ns 'server.ssb)" "(ssb/publish! server {:content \"testing publish\" :type \"post\"} )" "(def server (get @ssb/db-conns \"user-id\"))" "(get @ssb/db-conns \"user-id\")" "@ssb/db-conns" "ssb/db-conns" "ssb/conns" "(in-ns 'server.core)" "(shadow.cljs.devtools.api/nrepl-select :server)" "@db-conns" "(in-ns 'server.ssb)" "id" "db-conns" "@ssb/db-conns" "(in-ns 'server.core)" "(shadow.cljs.devtools.api/nrepl-select :server)" "(in-ns 'server.core)" " (shadow.cljs.devtools.api/nrepl-select :server)" "(in-ns 'server.core)" "(shadow.cljs.devtools.api/nrepl-select :server)" "(ns-publics 'server.core)" "(get-id server)" "(ns-publics 'server.core)" "(ns-publics)" "id" "(in-ns 'server.core)" "(in-ns 'server.core')" "(in-ns server.core)" "(in-ns \"server.core\")" "(shadow.cljs.devtools.api/nrepl-select :server)" "id" "(another-about-name server id)" "(go
  (let [c (chan 1)]
    (.about.latestValue server #js {:key \"name\" :dest id} 
                        (fn [err value] 
                          (if err (go (>! c err)) 
                              (go (>! c value))))) 
    (<! c)))" "id" "(go-get-about id)")